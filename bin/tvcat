#!/usr/bin/env ruby

# ----------------------------------------------
# Quick script to categorize downloaded TV shows
# ----------------------------------------------

require 'fileutils'
require 'ostruct'
require 'rubygems'
gem 'highline'
require 'highline'

# for mkdir, cp, etc.
include FileUtils

# The renamed files will in subdirectories of this folder
#
DEST_ROOT = "#{ENV['HOME']}/Movies/TV"

HL = HighLine.new

def setup

	# For files where the episode is specified as e.g. s01e01 or variant -- most common
	#
	snem_matcher = Matcher.new(/^(.*)s(\d{1,2})\.?ep?(\d{1,2}).*\.(...)$/i)

	# For files where the episode is specified as e.g. .101. -- less common, but still happens
	# 
	# This won't catch any shows that have had more than nine seasons, because it's hard to 
	# distinguish those from years (e.g. battlestar.galactica.2003 for the new series)
	#
	nnn_matcher = Matcher.new(/^(.*)\.(0?\d)?(\d\d)\.(?:.*\.)?(...)$/i)

	# 5x01 variant
	nxnn_matcher = Matcher.new(/^(.*)\.(0?\d)x?(\d\d)\.(?:.*\.)?(...)$/i)

	# Modification of the above.  May only apply to certain distributions of spooks/mi-5
	nnn_dash_matcher = Matcher.new(/^(.*) - (0?\d)?(\d\d) - \.(...)$/i)

	# For daily shows (like the Daily Show :) where there's not exactly a season, but there's
	# often a date.
	date_matcher = DateMatcher.new(/^(.*)\.(\d{4}).(\d\d.\d\d)(?:.*\.)?(...)$/i)
	date_inv_matcher = DateMatcher.new(/^(.*)\.(\d\d.\d\d)\.(\d{4})(?:.*\.)?(...)$/i, :season => 3, :episode => 2)

	Matcher.matchers = [
		snem_matcher,
		nnn_matcher,
		nxnn_matcher,
		nnn_dash_matcher,
		date_matcher,
		date_inv_matcher
	]

	# Names are sometimes written as abbreviations.  This map helps clean them up, and 
	# improve the capitalization and punctuation.  Replace strings of punctuation with spaces
	# and lowercase before looking up.
	#
	Matcher.names = [
		[/battlestar galactica|bsg/i,  'Battlestar Galactica'],
		[/mad men|\Amm\Z/i,  'Mad Men'],
		[/confidential/i,  'Doctor Who Confidential'],
		[/doctor who/i,  'Doctor Who'],
		[/l word|lword/i,  'The L Word'],
		[/heroes/i,  'Heroes'],
		[/journeyman/i,  'Journeyman'],
		[/conchords|fotc/i,  'Flight of the Conchords'],
		[/entourage/i,  'Entourage'],
		[/torchwood/i,  'Torchwood'],
		[/tudors/i, 'The Tudors'],
		[/true blood/i, 'True Blood'],
		[/colbert/i, 'The Colbert Report'],
		[/daily show|\Atds|tds\Z/i, 'The Daily Show'],
		[/caprica/i, 'Caprica'],
		[/dollhouse/i, 'Dollhouse'],
		[/mi5|mi-5|spooks/i,'MI-5']
	]
end

def main(files)

	setup
	if files.size <= 0
		puts "No files specified!"
		exit 1
	end

	mapping = {}
	misses = []

	for file in files
		info = Matcher.extract_info(file)
		if info
			mapping[file] = info
		else
			misses << file 
		end
	end

	if mapping.size <= 0
		puts "No files were recognized."
		exit 1
	end

	print_list(mapping)
	if misses.size > 0
		puts
		puts HL.color("Unrecognized: ", :reverse)
		misses.each do |file| 
			puts file
		end
	end

	puts
	if HL.agree(HL.color("Does this look right?", :bold))
		move_files(mapping)
		puts HL.color("Files moved!", :bold)
	else
		puts HL.color("Files ", :bold) + HL.color("NOT",:blink, :bold) + HL.color(" moved.", :bold)

	end
end

def print_list(mapping)
	ary = mapping.to_a.sort_by { |file, info| info.show }
	col1len = ary.transpose.first.map { |f| f.length }.max
	col2len = ary.transpose.last.map { |i| i.show.length }.max
	title_format = "%-#{col1len+1}s%-#{col2len+2}s%-7s%-8s%-5s"
	format = "%-#{col1len}s|%-#{col2len+1}s|%6s|%7s|%4s"
	puts HL.color(title_format % ["Filename", "Show", "Season", "Episode", "Type"], :reverse)
	for file, info in ary
		puts format % [file, info.show, info.season, info.episode, info.suffix]
	end
end

def move_files(mapping)
	mapping.each_pair do |file, info|	
		dir = File.join(DEST_ROOT, info.show)
		new_file = File.join(dir, "#{info.show}.s#{info.season}e#{info.episode}.#{info.suffix}")

		mkdir_p(dir)
		puts "moving #{file} -> #{new_file}"
		mv(file, new_file)
	end
end

class Matcher

	attr_reader :regexp, :show_idx, :season_idx, :episode_idx, :suffix_idx

	class << self
		attr_accessor :matchers, :names

		def extract_info(filename)
			for matcher in matchers
				result = matcher.match(filename)
				return result if result
			end
			return nil
		end
	end

	def initialize(regexp)
		@regexp = regexp
		@show_idx = 1
		@season_idx = 2
		@episode_idx = 3
		@suffix_idx = 4
	end

	def match (filename)
		md = regexp.match(filename)

		return nil unless md && md[show_idx] && md[season_idx] && md[episode_idx] && md[suffix_idx]

		show = clean_show_name(md[show_idx].downcase.gsub(/[[:punct:]]+/,' '))

		return nil unless show

		return OpenStruct.new(:show => show,
							  :season => normalize(md[season_idx]),
							  :episode => normalize(md[episode_idx]),
							  :suffix => md[suffix_idx])
	end

	def normalize(num)
		'%02d' % num.to_i
	end


	def clean_show_name(name)
		for regexp, clean in Matcher.names
			if regexp =~ name
				return clean
			end
		end
		return nil
	end
end

class DateMatcher < Matcher

	def initialize(regexp, options = {})
		super(regexp)
		@show_idx = options[:show] if options[:show]
		@season_idx = options[:season] if options[:season]
		@episode_idx = options[:episode] if options[:episode]
		@suffix_idx = options[:suffix] if options[:suffix]
	end

	def normalize(num)
		num
	end
		
end

Dir.chdir("#{ENV['HOME']}/Movies")
files = ARGV.dup
files = Dir.glob("*.*") if files.empty?
main(files)
