#!/usr/bin/env ruby

# ----------------------------------------------
# Quick script to categorize downloaded TV shows
# ----------------------------------------------

require 'fileutils'
require 'ostruct'
require 'rubygems'
gem 'highline'
require 'highline'

# for mkdir, cp, etc.
include FileUtils

# The renamed files will in subdirectories of this folder
#
DEST_ROOT = "#{ENV['HOME']}/Movies/TV"

# For files where the episode is specified as e.g. s01e01 or variant -- most common
#
SNEM_MATCHER = /^(.*)s(\d{1,2})\.?ep?(\d{1,2}).*\.(...)$/i

# For files where the episode is specified as e.g. .101. -- less common, but still happens
# 
# This won't catch any shows that have had more than nine seasons, because it's hard to 
# distinguish those from years (e.g. battlestar.galactica.2003 for the new series)
#
NNN_MATCHER = /^(.*)\.(\d)x?(\d\d)\.(?:.*\.)?(...)$/i

MATCHERS = [SNEM_MATCHER, NNN_MATCHER]

# Names are sometimes written as abbreviations.  This map helps clean them up, and 
# improve the capitalization and punctuation.  Replace strings of punctuation with spaces
# and lowercase before looking up.
#
NAMES = [
	[/battlestar galactica|bsg/,  'Battlestar Galactica'],
	[/mad men|\Amm\Z/,  'Mad Men'],
	[/confidential/,  'Doctor Who Confidential'],
	[/doctor who/,  'Doctor Who'],
	[/l word|lword/,  'The L Word'],
	[/heroes/,  'Heroes'],
	[/journeyman/,  'Journeyman'],
	[/conchords|fotc/,  'Flight of the Conchords'],
	[/entourage/,  'Entourage'],
	[/torchwood/,  'Torchwood'],
	[/tudors/, 'The Tudors'],
	[/true blood/, 'True Blood']
]

HL = HighLine.new

def main(files)
	mapping = {}
	misses = []

	for file in files
		info = extract_info(file)
		if info
			mapping[file] = info
		else
			misses << file 
		end
	end

	print_list(mapping)
	puts
	puts HL.color("Unrecognized: ", :reverse)
	misses.each do |file| 
		puts file
	end

	puts
	if HL.agree(HL.color("Does this look right?", :bold))
		move_files(mapping)
		puts HL.color("Files moved!", :bold)
	else
		puts HL.color("Files ", :bold) + HL.color("NOT",:blink, :bold) + HL.color(" moved.", :bold)

	end
end

def print_list(mapping)
	ary = mapping.to_a.sort_by { |file, info| info.show }
	col1len = ary.transpose.first.map { |f| f.length }.max
	col2len = ary.transpose.last.map { |i| i.show.length }.max
	title_format = "%-#{col1len+1}s%-#{col2len+2}s%-7s%-8s%-5s"
	format = "%-#{col1len}s|%-#{col2len+1}s|%6i|%7i|%4s"
	puts HL.color(title_format % ["Filename", "Show", "Season", "Episode", "Type"], :reverse)
	for file, info in ary
		puts format % [file, info.show, info.season, info.episode, info.suffix]
	end
end

def move_files(mapping)
	mapping.each_pair do |file, info|	
		dir = File.join(DEST_ROOT, info.show, "Season #{info.season}")
		new_file = File.join(dir, "Episode #{'%02d' % info.episode}.#{info.suffix}")

		mkdir_p(dir)
		puts "moving #{file} -> #{new_file}"
		mv(file, new_file)
	end
end

def extract_info(filename)
	for matcher in MATCHERS
		matcher =~ filename

		next unless $1 && $2 && $3 && $4

		season = $2.to_i
		episode = $3.to_i
		suffix = $4
		name = clean_name($1.downcase.gsub(/[[:punct:]]+/,' '))

		next unless name

		return OpenStruct.new(:show => name,
							  :season => season,
							  :episode => episode,
							  :suffix => suffix)
	end
	return nil
end

def clean_name(name)
	for matcher, clean in NAMES
		if matcher =~ name
			return clean
		end
	end
	return nil
end

main(ARGV.dup)
