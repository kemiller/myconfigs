#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

#
# rsr init
# rsr path <subpath>
# rsr alias <shortname> <subpath>
# rsr bundle <cmd*>
# rsr test <testname>
# rsr testlist <cmd> <prefix>
#

class Command 

  SAVEFILE = File.join(ENV['HOME'], ".rsrdir")

  def initialize(args)
  end

  def directory_is_rails(dir)
      File.exists?(File.join(dir, "config", "boot.rb")) &&
        File.directory?(File.join(dir, "app"))
  end

  def detect_rails_dir
    save_dir(find_dir_matching(&method(:directory_is_rails)))
  end

  def save_dir(dir)
    if dir
      File.open(SAVEFILE, File::CREAT|File::TRUNC|File::WRONLY) { |f| f.puts(dir) }
    end
    dir
  end

  def recall_dir
    File.open(SAVEFILE, File::CREAT|File::RDONLY) { |f| f.read.strip }
  end

  def rails_dir
    detect_rails_dir || recall_dir || raise("Not in a rails dir")
  end

  def full_path_for_subdir(subdir)
    File.join(rails_dir, subdir)
  end

  def find_dir_matching(&callable)
    path = Dir.pwd
    segments = path.split('/')
    while !segments.empty?
      dir = File.join(*segments)
      if callable.call(dir)
        return dir
      else
        segments.pop
      end
    end
  end

  def bundle_exec(*args)
    if find_dir_matching { |dir| File.exists?(File.join(dir, "Gemfile")) }
      args = ["bundle", "exec", *args]
    end
    puts args.join(' ')
    exec(*args)
  end

end

class CommandDispatcher

  def add(command_klass)
    registry[command_klass.name] = command_klass
  end

  def run(args)
    command_name = args.shift
    klass = registry[command_name]
    if klass
      command = klass.new(args)
      command.execute
    else
      puts "Available Commands:\n\n"
      registry.keys.each do |name|
        puts "    #{name}"
      end
      exit 1
    end
  rescue RuntimeError => re
    $stderr << re.message
    exit 1
  end

  private

  def registry
    @registry ||= {}
  end
end


class PathCommand < Command
  def self.name
    "path"
  end

  def initialize(args)
    @subpath = args.shift || ""
  end

  def execute
    puts full_path_for_subdir(@subpath)
  end
end

class AliasCommand < Command
  def self.name
    "alias"
  end

  def initialize(args)
    @alias = args.shift
    @subpath = args.shift

    raise "Usage: rsr alias <shortname> <subpath>" unless @alias && @subpath
  end

  def execute
    puts %{function #{@alias} () { cd $(rsr path #{@subpath})/$1; } }
    puts %{function _#{@alias}_complete () {
           #{@alias} || return 1;
           COMPREPLY=( `find $2* -type d` )
       }}
    puts %{complete -F _#{@alias}_complete #{@alias}}
  end
end

class BundleCommand < Command
  def self.name
    "bundle"
  end

  def initialize(args)
    raise "Usage: rsr bundle command [args]" if args.empty?
    @args = args
  end

  def execute
    bundle_exec(*@args)
  end
end

class TestCommand < Command
  def self.name
    "test"
  end

  def initialize(args)
    @testcase = args.shift
    @test = args.shift

    raise "Usage: rsr test <testcase> [<test method>]" unless @testcase
  end

  def execute
    if ENV['RSRTESTLITE'] == 'true'
      if @test
        args = [full_testcase, "-n#{@test}"]
      else
        args = [full_testcase]
      end
      bundle_exec("ruby", *args)
    else
      ENV['TEST'] = full_testcase
      if @test
        ENV['TESTOPTS'] = "-n#{@test}"
      end
      bundle_exec("rake", "test:units")
    end
  end

  def full_testcase
    units = full_path_for_subdir('test/unit')
    funcs = full_path_for_subdir('test/functional')

    possible_files = [
      File.join(units, @testcase),
      File.join(units, @testcase + ".rb"),
      File.join(units, @testcase + "_test.rb"),
      File.join(funcs, @testcase),
      File.join(funcs, @testcase + ".rb"),
      File.join(funcs, @testcase + "_test.rb"),
      File.join(funcs, @testcase + "_controller_test.rb")
    ]

    possible_files.each do |file|
      if File.exists?(file)
        return file
      end
    end
    raise "No such test file: #{@testcase}"
  end
end

class TestListCommand < Command
  def self.name
    "testlist"
  end

  def initialize(args)
    args.shift # ignore the first argument, set by bash completion
    @prefix = args.shift || ""
  end

  def execute
    puts getfiles('test/unit') + getfiles('test/functional')
  end

  private

  def getfiles(subdir)
    path = full_path_for_subdir(subdir)
    Dir.chdir(path)
    Dir["**/#{@prefix}*.rb"]
  end
end

dispatcher = CommandDispatcher.new
dispatcher.add(PathCommand)
dispatcher.add(AliasCommand)
dispatcher.add(BundleCommand)
dispatcher.add(TestCommand)
dispatcher.add(TestListCommand)
dispatcher.run(ARGV)
